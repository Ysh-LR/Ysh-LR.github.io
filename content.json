{"meta":{"title":"Ysh-Lr's Blog","subtitle":"Ysh-Lrの博客","description":"本科二年级 | 软件工程 | 系统与技术","author":"Ysh-Lr","url":"https://ysh-lr.github.io","root":"/"},"pages":[{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-13T09:37:49.593Z","comments":true,"path":"List/index.html","permalink":"https://ysh-lr.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"","date":"2022-01-13T09:51:49.590Z","updated":"2022-01-13T09:37:50.007Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://ysh-lr.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-13T09:37:49.531Z","comments":true,"path":"404.html","permalink":"https://ysh-lr.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2022-01-13T09:51:49.585Z","updated":"2022-01-13T09:37:50.000Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://ysh-lr.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-13T09:37:50.000Z","comments":true,"path":"archives/index.html","permalink":"https://ysh-lr.github.io/archives/index.html","excerpt":"","text":""},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-13T09:37:49.996Z","comments":true,"path":"about/index.html","permalink":"https://ysh-lr.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-13T09:37:50.000Z","comments":true,"path":"categories/index.html","permalink":"https://ysh-lr.github.io/categories/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-01-13T09:37:50.004Z","comments":true,"path":"census/index.html","permalink":"https://ysh-lr.github.io/census/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-01-13T09:37:50.006Z","comments":true,"path":"friends/index.html","permalink":"https://ysh-lr.github.io/friends/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-01-13T10:19:00.000Z","updated":"2022-01-13T10:20:43.969Z","comments":true,"path":"contact/index.html","permalink":"https://ysh-lr.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 Ysh-Lr de 友链信息 博客名称: Ysh-Lrの博客 博客网址: Hexo (ysh-lr.github.io) 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: 去出发,去遇见"},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-13T09:37:50.008Z","comments":true,"path":"resource/index.html","permalink":"https://ysh-lr.github.io/resource/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-13T09:37:50.010Z","comments":true,"path":"tags/index.html","permalink":"https://ysh-lr.github.io/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-01-13T09:37:49.558Z","updated":"2022-01-13T09:37:49.558Z","comments":true,"path":"List/galleries/index.html","permalink":"https://ysh-lr.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-13T09:37:49.601Z","comments":true,"path":"List/tools/index.html","permalink":"https://ysh-lr.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-13T09:37:49.593Z","comments":true,"path":"List/music/index.html","permalink":"https://ysh-lr.github.io/List/music/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-13T09:37:49.593Z","comments":true,"path":"List/movies/index.html","permalink":"https://ysh-lr.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-01-13T09:37:49.566Z","updated":"2022-01-13T09:37:49.566Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-01-13T09:37:49.573Z","updated":"2022-01-13T09:37:49.573Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-01-13T09:37:49.576Z","updated":"2022-01-13T09:37:49.576Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-01-13T09:37:49.568Z","updated":"2022-01-13T09:37:49.568Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-01-13T09:37:49.575Z","updated":"2022-01-13T09:37:49.575Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-01-13T09:37:49.568Z","updated":"2022-01-13T09:37:49.568Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-01-13T09:37:49.576Z","updated":"2022-01-13T09:37:49.576Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-01-13T09:37:49.584Z","updated":"2022-01-13T09:37:49.584Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-01-13T09:37:49.585Z","updated":"2022-01-13T09:37:49.585Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-01-13T09:37:49.585Z","updated":"2022-01-13T09:37:49.585Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-01-13T09:37:49.585Z","updated":"2022-01-13T09:37:49.585Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-01-13T09:37:49.593Z","updated":"2022-01-13T09:37:49.593Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://ysh-lr.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"操作系统学习笔记(一)","slug":"post-3","date":"2022-01-14T11:51:44.000Z","updated":"2022-01-15T14:01:50.726Z","comments":true,"path":"posts/392e0872.html","link":"","permalink":"https://ysh-lr.github.io/posts/392e0872.html","excerpt":"","text":"计算机操作系统(一) 操作系统是配置在计算机硬件上的第一层软件,是对硬件系统的首次扩充,其主要作用是管理好这些设备,提高它们的利用率和系统的吞吐量,并为用户和应用程序提供一个简单的接口,便于用户使用。 操作系统的目标、作用及发展过程操作系统的目标 ==方便性== 裸机使用→机器语言 配置OS→高级语言编写的程序或OS提供的命令→方便用户、易学易用 有效性 提高系统资源的利用率 提高系统的吞吐量 ==可扩充性== 为适应计算机硬件、体系结构以及计算机应用发展的要求。 无结构→模块化结构→层次化结构→微内核结构 开放性 硬件与软件的兼容性 系统能遵循世界标准规范→统一的开放环境以实现应用的可移植性与互操作性 不同设备间可以通过网络集成，正确有效的协同工作 操作系统的作用 作为用户与计算机硬件系统之间的接口； （1）命令方式 （2）系统调用方式 （3）图标—窗口方式 作为计算机系统资源的管理者； 计算机系统资源（四类）：处理机、存储器、I/O设备、文件（数据和程序） 实现了对计算机资源的抽象； 操作系统的发展过程人工操作→单道批处理→多道批处理→分时系统→实时系统（优缺点） 操作系统的基本特性 并发 · ==并行与并发== 并行性：两个或多个事件在同一==时刻==发生。 并发性：两个或多个事件在同一==时间间隔==内发生。 多道程序环境下：宏观上有多个程序在同时运行，但在单处理机系统中，每一时刻仅能有一道程序执行→微观上为分时交替进行→==并发==。但是如果有多个处理机，这些可以并发执行的程序可以分配给不同处理机执行→==并行==，实现微观意义上的同时进行。 · ==进程与线程== 未引入进程：计算程序与I/O程序（CPU空闲）间顺序执行。对计算程序和I/O程序分别设立进程：可以并发执行。 引入进程：程序为静态的。进程为程序的执行→提高系统资源利用率，增加系统的吞吐量。 引入线程：进程的更小的可执行单位，一个进程可包含若干个进程。 共享 一般情况下共享与操作系统环境下的共享其含义并不相同：前者未限定借阅者必须在同一时间或间隔和同一地点进行共享；而在OS环境下的共享是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用。 这里在==宏观上==既限定了时间（进程在内存期间内），也限定了地点（内存）。 由于资源属性的不同，进程对资源共享的方式也不同，目前主要有以下两种资源共享方式：互斥共享方式系统中的某些资源，如打印机、磁带机，虽然它们可以提供给多个进程(线程)使用，但为使所打印或记录的结果不致造成混淆，应规定在一段时间内只允许一个进程(线程)访问该资源，我们把这种资源共享方式称为互斥式共享。临界资源或独占资源：一段时间内只允许一个进程访问的资源。计算机系统中的大多数物理设备，以及某些软件中所用的栈、变量和表格，都属于临界资源，它们要求被互斥地共享。同时访问方式允许在一段时间内由多个进程 “同时”对它们进行访问。这里所谓的“同时”往往是宏观上的，而在==微观上==，这些进程可能是交替地对该资源进行访问。并发和共享是多用户(多任务)OS的两个最基本的特征。它们又是互为存在的条件。 虚拟 异步","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://ysh-lr.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"机器学习Day1","slug":"post-2","date":"2022-01-14T01:05:36.000Z","updated":"2022-01-14T01:06:55.040Z","comments":true,"path":"posts/8625e497.html","link":"","permalink":"https://ysh-lr.github.io/posts/8625e497.html","excerpt":"","text":"[TOC] 机器学习 Day.1 一般地，令D = {x,x2….x.m}表示包含m个示例的数据集，每个示例由d个属性描述,则每个示例Xi= (xi1;xi2;……;xid) 是d维样本空间X中的一个向量, xi∈x,其中xij是xi在第j个属性上的取值(例如上述第3个西瓜在第2个属性上的值是“硬挺”), d称为样本xi的“维数”(dimensionality). 基础概念 （属性1 = 取值，属性2 = 取值，……，属性3=取值）——一个示例 {示例1，示例2，……，示例3}——数据集 每条示例中所有的属性分别看作一根坐标轴张成==属性空间/样本空间==，则可以把一个示例称为==特征向量== graph LR A[预测任务] --&gt;Z(监督学习) A --&gt;Y(无监督学习) Y--&gt;X(聚类) Z --&gt;B(离散型) B --&gt; C(分类) C --&gt;|仅涉及两个类别|F(二分类) F --&gt;M(y = -1,+1) C --&gt;|涉及多个类别|G(多分类) G --&gt;L(y的绝对值&gt;2) Z --&gt;D(连续型) D --&gt;E(回归) E --&gt;N(y=R) 泛化能力：学得模型适用于新样本的能力。 假设空间规模大小：搜索目标是找到能够将训练集中的瓜判断正确的假设。假设的表示一旦确定，假设空间及规模大小也就确定了：（属性1的表示个数属性2的……属性n的表示个数==+1==） 注：在考虑取值的时候，要考虑==该属性不影响结果==（用通配符*表示）、==不存在要求结果==（输出结果为空）两种容易忽略的情况。 版本空间：根据假设的表示得到假设空间，剔除与样本集中正例（某事发生）不一致的假设向量和与负例一致的假设向量后剩余向量构成版本空间。 注意：含通配符的假设向量可能会和负例一致，一定要谨慎！不要多/少 偏好：1.尽可能特殊（适用情况尽可能少）；2.尽可能一般（适用情况尽可能多）；…… 怎么判断是一般还是特殊？ ​ 数据集中符合新样本属性的各类示例输出结果中多的为一般，少的为特殊。 ==引导算法确立“正确的”偏好的原则== “奥卡姆剃刀”：若有多个假设与观察一致，则选最简单的那个","categories":[],"tags":[{"name":"西瓜书 笔记","slug":"西瓜书-笔记","permalink":"https://ysh-lr.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6-%E7%AC%94%E8%AE%B0/"}]},{"title":"Java复习细节拾遗","slug":"post-1","date":"2022-01-13T13:43:03.000Z","updated":"2022-01-15T02:14:58.710Z","comments":true,"path":"posts/1486b1bb.html","link":"","permalink":"https://ysh-lr.github.io/posts/1486b1bb.html","excerpt":"","text":"[TOC] Java复习(细节拾遗)前三章的一点点小知识 Java语言数据中的数值类型都是有符号(正负号)的，在贮存数值类型的数据时，其最高位用来表示数据的正负号。 简单类型的变量被声明时，存储空间也同时被分配。该贮存空间只占用一个单一贮存单元。对简单类型变量访问则直接可以得到它的数据。 引用类型声明变量时，是==不会==为变量(即对象)分配存储空间。它们声明的变量不是数据本身，而是数据的引用(reference)，需用new运算符来为引用类型的变量分配贮存空间，在运行时动态的分配内存大小 .例如:==数组== 整型类型和boolean类型之间不能相互转换 switch所用的表达式为int类型相容的数据表达式，它可以是byte、short、char或者int类型的值，特别要指出的是不能是布尔型的值。 continue的作用与break类似,主要用于循环,所不同的是break会结束程序块的执行,而continue只会结束其之后程序块的语句,并跳回循环程序块的开头继续下一个循环,而不是离开循环 方法中引用类型形参改变实参也会改变(引用类型变量指向的是内存地址,形参和实参指向的是同一内存地址.所以方法对引用型变量的改变会保存下来. 第四章 面向对象(上)类中定义:成员变量;方法中定义:局部变量。同名变量，方法调用的是==局部变量==。——为避免该情形，提供了==this==关键字。 This关键字 表示当前对象，指向调用的对象本身（成员变量、成员方法） println(this)与println(p)输出的是堆地址； 相等 不相等 This的三种用法： 使用This调用类中属性（常用于带参构造方法中） 调用成员方法 调用构造方法：this([实参列表]) 在构造方法中，使用this调用构造方法的语句==必须位于首行==，==且只能出现一次== this调用构造方法时，一定要留一个出口，即至少存在一个构造方法不使用this调用其他构造方法。 声明一个引用变量：==变量名在栈内存中==（如下图,p1,p2） new一个对象：==为对象在堆中分配内存空间== 一个对象能够被多个变量所引用 垃圾回收 动态存储管理技术，由Java虚拟机自动回收垃圾对象所占的内存空间 在setXxx()方法中，如果对属性有条件制约，那么调用set方法输入被过滤范围内的数值时，原属性仍为初始化值（String:null，int:0） 类未定义构造方法时，系统会自动提供一个空参构造器，但自己定义构造方法后，系统==不会==再提供空参构造器。 重载：多个构造方法，但是参数列表不同。 static关键字 使用static关键字修饰的成员变量称为静态变量或类变量，它被类的所有对象共享，可以通过==类名==直接访问。 未使用static修饰的变量为实例变量，属于具体对象独有，只能通过引用变量访问。 输出：1（初始化为0） 输出：5 注：static关键字在修饰变量的时候只能修饰成员变量，==不能修饰方法中的局部变量== 使用static修饰的成员方法，称为静态方法，无需创建类的实例（对象）就可以调用静态方法，其可以通过类名调用。 静态方法==只能访问类的静态成员（静态变量、静态方法）==，不能访问类的实例成员。因为实例成员属于对象，要创建对象才能访问。 内部类 是外部类的一个成员，内部类可以访问外部类的任何成员（包括私有成员:外部类名.this.外部类私有成员变量），外部类不能直接访问内部类成员。 可为静态，可以用Protect和private修饰（外部类不能，只能public和默认） 经Java编译器编译后生成的外部类与内部类是独立的 在外部类中访问内部类需要==创建内部类的对象==使用内部类的对象访问其中成员。 若在外部类==外==访问内部类，则需要通过外部类对象去创建内部类对象 外部类名.内部类名 引用变量名=new 外部类名().内部类名() 第五章 面向对象（下）继承方法重写：子类重写的方法不能拥有比父类方法更加严格的访问权限。 重载：在同一个类中，方法名相同，但参数个数或参数类型不同 重写：子类与父类之间，方法名、返回值类型和参数列表相同。 子类中访问父类里被重写的方法：super 在一个构造方法中调用重载的另一个构造方法使用关键字：this；在子类构造方法中调用父类构造方法使用关键字supper（同样要位于构造方法第一行） 子类中如果没有显式的调用父类的构造方法，将自动调用父类的空参构造方法（若父类没有空参构造方法，则会报错） final关键字 用它修饰的类、方法、变量不可以修改：类不能被继承；方法不能被子类重写；变量为常量，初始化后不能再修改。 Java虚拟机不会为final修饰的变量默认初始化——==用final修饰成员变量时，需要在声明时立即初始化，或在构造方法中初始化== 可以修饰引用变量：表示只能是中引用一个对象，但对象的内容可以更改。 抽象类 抽象方法：不含方法体的方法。 包含抽象方法的类==必须是抽象类==，抽象类可以==不包含任何抽象方法== 抽象类不可以实例化（不能用new创建对象）——必须通过子类继承抽象类去实现抽象方法。(具体子类==必须实现抽象父类中的所有方法==,否则子类必须声明为抽象类. 抽象方法（不是抽象类!注意区分）不能用static（可通过类名访问）、final（不能重写）、private（==子类不能访问带private的抽象方法==）关键字修饰。 注：子类并==不是==能够继承父类的所有属性和方法，子类只能够继承父类的非私有成员。 抽象类可以定义构造方法与成员变量！！！——如果抽象类有构造方法（构造方法允许有方法体），则子类的构造方法中必须先对抽象类进行构造【supper(参数列表)】==子类构造时会默认调用父类中无参构造方法==。 接口（interface变量默认为public static final,方法默认为public abstract。 implements实现接口（允许==多个== 区别点 接口 抽象类 含义 接口通常用于描述一个类的外围能力，而不是核心特征 抽象类定义了他的子类的核心特征。 方法 接口只提供方法声明 抽象类可以提供完整方法（==抽象类不一定含有抽象方法==）、默认构造方法以及用于覆盖的方法声明。 变量 只包含public static final常量，必须在声明时初始化 可以包含实例变量和静态变量 多重继承 一个类可以继承多个接口 一个类只能继承一个抽象类 实现类 类可以实现多个接口 类只从抽象类派生,必须重写 多态 同一操作作用于不同的对象可以有不同的解释. 方法的实现是由变量的==实际类型==决定的。 多态体现的是==向上转型==,也称隐式转换。 向下转型必须强制转换： Person p=new Child();//向上转型 Parent o =(Parent)p;//向下转型 equals类默认比较的是引用变量地址（==也是）；String类中的equals被重写为比较两字符串内容是否相等。 多线程==线程的安全性问题==1.同步代码块 IO流FileInputStreamfinally不能直接访问try中的内容,为防止程序中断后,流无法释放占用资源,==一定要将close方法写在finally中==,流要定义在==try外面==","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://ysh-lr.github.io/tags/java/"}]},{"title":"LeetCode No.7","slug":"post","date":"2022-01-13T13:30:26.000Z","updated":"2022-01-15T02:08:09.697Z","comments":true,"path":"posts/c5bc31ac.html","link":"","permalink":"https://ysh-lr.github.io/posts/c5bc31ac.html","excerpt":"","text":"[TOC] LeetCode题解（7.整数反转）题面 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）。 示例 1： 输入：x = 123输出：321 示例 2： 输入：x = -123输出：-321 示例 3： 输入：x = 120输出：21 示例 4： 输入：x = 0输出：0 提示： -231 &lt;= x &lt;= 231 - 1 分析整数反转算是烂大街的（不是）考题了，其实看到反转第一反应是栈……但是对付整数来讲略微小题大做。 最无脑的反转方法就是x/10,x%10,x%100……得到x每一位上的数字然后再乘回去，从这种无脑的思想中其实可以总结出一个公式：result = result*10+x%10;x=x/10; 构成循环，循环的终止条件自然就是x==0，这种情况，while最合适了。 这里记录一下我犯过的愚蠢错误： 倒在单词拼写上的女人：while我再也不会拼错啦 x/10和x%10:前者是得到去除个位后的数字，后者是取当前个位数字（老是搞混，呜呜 但是！这道题最膈应人的地方并不是如何把整数反转（因为它实在是太简单了 这道题的重头应该在于==特殊情况的输出如何进行判断== 如题，我们最后的结果result在超过一定范围后要输出0，所以显然我们要对result取值进行判断，但是==假设环境不允许存储 64 位整数（有符号或无符号）。== ？？？ 这怎么搞 环境不允许存储64位整数意味着无法写该范围————怎么处理？ 这时候想到了long 64位，如果将64位long强转为int也相等……OK class Solution { public int reverse(int x) { long result = 0; while(x!=0){ result=result*10+x%10; x=x/10; } if((int)result == result){ return (int)result; } else return 0; } }","categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://ysh-lr.github.io/tags/LeetCode/"}]}],"categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://ysh-lr.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"西瓜书 笔记","slug":"西瓜书-笔记","permalink":"https://ysh-lr.github.io/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6-%E7%AC%94%E8%AE%B0/"},{"name":"java","slug":"java","permalink":"https://ysh-lr.github.io/tags/java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://ysh-lr.github.io/tags/LeetCode/"}]}